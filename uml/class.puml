@startuml

class DataChunk {
    bool get isEmpty
    int get length
    DataChunk(List<int> data, [int start = 0, int length])
    int checkOneByte()
    int extractOneByte()
    DataChunk extractDataChunk(int length)
    DataRange extractFixedLengthDataRange(int length)
    DataRange extractUpToDataRange(int terminator)
}

class DataRange {
    List<int> get data
    int get length
    bool get isPending
    DataRange(List<int> data, [int start = 0, int length])
    DataRange.pending(List<int> data, [int start = 0])
    int toInt()
    String toString()
    String toUTF8String()
}

class ReaderBuffer {
    int get payloadLength
    bool get isAllRead
    ReaderBuffer(List<DataChunk> chunks, int payloadLength)
    void skipByte()
    void skipBytes(int length)
    int checkOneLengthInteger()
    int readOneLengthInteger()
    int readFixedLengthInteger(int length)
    int readLengthEncodedInteger()
    String readNulTerminatedString()
    String readNulTerminatedUTF8String()
    String readFixedLengthString(int length)
    String readFixedLengthUTF8String(int length)
    String readLengthEncodedString()
    String readLengthEncodedUTF8String()
    String readRestOfPacketString()
    String readRestOfPacketUTF8String()
}

class DataReader {
    DataReader(Stream<List<int>> stream)
    Future?<ReaderBuffer> readBuffer(int length)
}

DataChunk .> DataRange
ReaderBuffer .> DataRange
ReaderBuffer .> DataChunk
DataReader .> DataChunk
DataReader .> ReaderBuffer

@enduml